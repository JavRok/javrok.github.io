!function(r){var n={};function i(e){if(n[e])return n[e].exports;var t=n[e]={i:e,l:!1,exports:{}};return r[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.m=r,i.c=n,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/js/",i(i.s=2)}([function(e,t,r){},function(e,t,r){},function(e,t,r){"use strict";r.r(t);r(0),r(1);function o(e,t){t.appendChild(document.createTextNode(e)),t.appendChild(document.createElement("br"))}var n=function(o,s,a,c){return new(a||(a=Promise))(function(e,t){function r(e){try{i(c.next(e))}catch(e){t(e)}}function n(e){try{i(c.throw(e))}catch(e){t(e)}}function i(t){t.done?e(t.value):new a(function(e){e(t.value)}).then(r,n)}i((c=c.apply(o,s||[])).next())})},s=function(r,n){var i,o,s,e,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return e={next:t(0),throw:t(1),return:t(2)},"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,o&&(s=2&t[0]?o.return:t[0]?o.throw||((s=o.return)&&s.call(o),0):o.next)&&!(s=s.call(o,t[1])).done)return s;switch(o=0,s&&(t=[2&t[0],s.value]),t[0]){case 0:case 1:s=t;break;case 4:return a.label++,{value:t[1],done:!1};case 5:a.label++,o=t[1],t=[0];continue;case 7:t=a.ops.pop(),a.trys.pop();continue;default:if(!(s=0<(s=a.trys).length&&s[s.length-1])&&(6===t[0]||2===t[0])){a=0;continue}if(3===t[0]&&(!s||t[1]>s[0]&&t[1]<s[3])){a.label=t[1];break}if(6===t[0]&&a.label<s[1]){a.label=s[1],s=t;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(t);break}s[2]&&a.ops.pop(),a.trys.pop();continue}t=n.call(r,a)}catch(e){t=[6,e],o=0}finally{i=s=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}},a=document.getElementById("log"),c=function(){function e(e){this.hasGetUserMedia=!(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia),this.hasCameraAccess=!1,this.devices=null,this.currentDevice=-1,this.videoElem=e}return e.prototype.getCameras=function(){return n(this,void 0,void 0,function(){var t;return s(this,function(e){switch(e.label){case 0:if(!this.hasGetUserMedia)throw"Your browser doesn't support media access. Please use iOS Safari or Android Chrome.";e.label=1;case 1:return e.trys.push([1,3,,4]),[4,navigator.mediaDevices.enumerateDevices()];case 2:return t=e.sent(),this.devices=t.filter(function(e){return"videoinput"===e.kind}),[2,this.devices];case 3:throw e.sent();case 4:return[2]}})})},e.prototype.getCameraPermission=function(){return n(this,void 0,void 0,function(){var t,r,n,i=this;return s(this,function(e){switch(e.label){case 0:if(!this.hasGetUserMedia)throw"Your browser doesn't support media access. Please use iOS Safari or Android Chrome.";e.label=1;case 1:return e.trys.push([1,5,,6]),this.devices?[3,3]:[4,this.getCameras()];case 2:e.sent(),e.label=3;case 3:return null===this.devices||0===this.devices.length?(o("No cameras available",a),[2,null]):(t={video:{deviceId:{exact:this.devices[0].deviceId}},audio:!1},r=this,[4,navigator.mediaDevices.getUserMedia(t)]);case 4:return r.currentStream=e.sent(),this.currentDevice=0,this.videoElem.srcObject=this.currentStream,this.videoElem.onloadedmetadata=function(){i.cameraResolution={width:i.videoElem.videoWidth,height:i.videoElem.videoHeight}},[2,!0];case 5:throw n=e.sent(),console.error("getUserMedia error: "+n.name,n),"ConstraintNotSatisfiedError"===n.name?"The constraints are not supported":"PermissionDeniedError"===n.name||"NotAllowedError"===n.name?"User denied camera use ðŸ˜’":n;case 6:return[2]}})})},e.prototype.stopCurrentStream=function(){this.currentStream&&(this.currentStream.getVideoTracks().forEach(function(e){e.stop()}),this.videoElem.srcObject=null)},e.prototype.selectNextCamera=function(){return n(this,void 0,void 0,function(){var t,r,n,i=this;return s(this,function(e){switch(e.label){case 0:if(!this.hasGetUserMedia)throw"Your browser doesn't support media access. Please use iOS Safari or Android Chrome.";if(this.devices.length<2)throw"There's only one camera, can't switch";e.label=1;case 1:return e.trys.push([1,3,,4]),this.currentDevice=(this.currentDevice+1)%this.devices.length,t={video:{deviceId:{exact:this.devices[this.currentDevice].deviceId}},audio:!1},this.stopCurrentStream(),r=this,[4,navigator.mediaDevices.getUserMedia(t)];case 2:return r.currentStream=e.sent(),this.videoElem.srcObject=this.currentStream,this.videoElem.onloadedmetadata=function(){i.cameraResolution={width:i.videoElem.videoWidth,height:i.videoElem.videoHeight}},[2,!0];case 3:throw n=e.sent(),console.error("getUserMedia error: "+n.name,n),"ConstraintNotSatisfiedError"===n.name?"The constraints are not supported":"PermissionDeniedError"===n.name||"NotAllowedError"===n.name?"User denied camera use ðŸ˜’":n;case 4:return[2]}})})},e}(),u=function(o,s,a,c){return new(a||(a=Promise))(function(e,t){function r(e){try{i(c.next(e))}catch(e){t(e)}}function n(e){try{i(c.throw(e))}catch(e){t(e)}}function i(t){t.done?e(t.value):new a(function(e){e(t.value)}).then(r,n)}i((c=c.apply(o,s||[])).next())})},l=function(r,n){var i,o,s,e,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return e={next:t(0),throw:t(1),return:t(2)},"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,o&&(s=2&t[0]?o.return:t[0]?o.throw||((s=o.return)&&s.call(o),0):o.next)&&!(s=s.call(o,t[1])).done)return s;switch(o=0,s&&(t=[2&t[0],s.value]),t[0]){case 0:case 1:s=t;break;case 4:return a.label++,{value:t[1],done:!1};case 5:a.label++,o=t[1],t=[0];continue;case 7:t=a.ops.pop(),a.trys.pop();continue;default:if(!(s=0<(s=a.trys).length&&s[s.length-1])&&(6===t[0]||2===t[0])){a=0;continue}if(3===t[0]&&(!s||t[1]>s[0]&&t[1]<s[3])){a.label=t[1];break}if(6===t[0]&&a.label<s[1]){a.label=s[1],s=t;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(t);break}s[2]&&a.ops.pop(),a.trys.pop();continue}t=n.call(r,a)}catch(e){t=[6,e],o=0}finally{i=s=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}},d=document.querySelector(".video"),h=document.getElementById("log"),f=document.querySelector(".intro-text"),v=document.querySelector(".switch-camera");!function(){u(this,void 0,void 0,function(){var t,r,n,i=this;return l(this,function(e){switch(e.label){case 0:return e.trys.push([0,3,,4]),[4,(t=new c(d)).getCameraPermission()];case 1:return e.sent()?(f.innerHTML="Now focus on some body parts ðŸ’ª ðŸ‘±",[4,t.getCameras()]):(f.innerHTML="User denied camera use ðŸ˜’",[2]);case 2:return(r=e.sent())&&1<r.length?v.addEventListener("click",function(e){return u(i,void 0,void 0,function(){return l(this,function(e){switch(e.label){case 0:return d.classList.add("switching"),[4,function(r){return new Promise(function(e,t){return setTimeout(e,r)})}(400)];case 1:return e.sent(),[4,t.selectNextCamera()];case 2:return e.sent(),d.classList.remove("switching"),[2]}})})}):v.classList.add("hidden"),[3,4];case 3:return n=e.sent(),console.log(n),o("Error: "+n,h),d.classList.remove("switching"),[3,4];case 4:return[2]}})})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,