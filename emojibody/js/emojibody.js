!function(r){var n={};function i(e){if(n[e])return n[e].exports;var t=n[e]={i:e,l:!1,exports:{}};return r[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.m=r,i.c=n,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/js/",i(i.s=2)}([function(e,t,r){},function(e,t,r){},function(e,t,r){"use strict";r.r(t);r(0),r(1);function o(e,t){t.appendChild(document.createTextNode(e)),t.appendChild(document.createElement("br"))}var n=function(o,s,c,a){return new(c||(c=Promise))(function(e,t){function r(e){try{i(a.next(e))}catch(e){t(e)}}function n(e){try{i(a.throw(e))}catch(e){t(e)}}function i(t){t.done?e(t.value):new c(function(e){e(t.value)}).then(r,n)}i((a=a.apply(o,s||[])).next())})},s=function(r,n){var i,o,s,e,c={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return e={next:t(0),throw:t(1),return:t(2)},"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(i)throw new TypeError("Generator is already executing.");for(;c;)try{if(i=1,o&&(s=2&t[0]?o.return:t[0]?o.throw||((s=o.return)&&s.call(o),0):o.next)&&!(s=s.call(o,t[1])).done)return s;switch(o=0,s&&(t=[2&t[0],s.value]),t[0]){case 0:case 1:s=t;break;case 4:return c.label++,{value:t[1],done:!1};case 5:c.label++,o=t[1],t=[0];continue;case 7:t=c.ops.pop(),c.trys.pop();continue;default:if(!(s=0<(s=c.trys).length&&s[s.length-1])&&(6===t[0]||2===t[0])){c=0;continue}if(3===t[0]&&(!s||t[1]>s[0]&&t[1]<s[3])){c.label=t[1];break}if(6===t[0]&&c.label<s[1]){c.label=s[1],s=t;break}if(s&&c.label<s[2]){c.label=s[2],c.ops.push(t);break}s[2]&&c.ops.pop(),c.trys.pop();continue}t=n.call(r,c)}catch(e){t=[6,e],o=0}finally{i=s=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}},c=document.getElementById("log"),a={audio:!1,video:!0};var i=function(){function e(e){this.hasGetUserMedia=!(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia),this.hasCameraAccess=!1,this.devices=null,this.currentDevice=-1,this.videoElem=e}return e.prototype.getCameras=function(){return n(this,void 0,void 0,function(){var t;return s(this,function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),this.hasGetUserMedia?[4,navigator.mediaDevices.enumerateDevices()]:(console.log("getUserMedia() is not supported by your browser"),[2,null]);case 1:return t=e.sent(),this.devices=t.filter(function(e){return"videoinput"===e.kind}),[2,this.devices];case 2:return e.sent(),[2,null];case 3:return[2]}})})},e.prototype.getCameraPermission=function(){return n(this,void 0,void 0,function(){var t,r,n,i=this;return s(this,function(e){switch(e.label){case 0:return e.trys.push([0,4,,5]),this.hasGetUserMedia?this.devices?[3,2]:[4,this.getCameras()]:(console.log("getUserMedia() is not supported by your browser"),[2,null]);case 1:e.sent(),e.label=2;case 2:return null===this.devices||0===this.devices.length?(console.log("No cameras available"),o("No cameras available",c),[2,null]):(t={video:{deviceId:{exact:this.devices[0].deviceId}},audio:!1},r=this,[4,navigator.mediaDevices.getUserMedia(t)]);case 3:return r.currentStream=e.sent(),this.currentDevice=0,this.videoElem.srcObject=this.currentStream,this.videoElem.onloadedmetadata=function(){console.log("Video resolution: ",i.videoElem.videoWidth,i.videoElem.videoHeight),i.cameraResolution={width:i.videoElem.videoWidth,height:i.videoElem.videoHeight}},[2,!0];case 4:if(n=e.sent(),console.error("getUserMedia error: "+n.name,n),"ConstraintNotSatisfiedError"===n.name)throw"The constraints are not supported "+a;if("PermissionDeniedError"===n.name)throw"User denied permission to access the camera. Too bad.";return[3,5];case 5:return[2]}})})},e.prototype.stopCurrentStream=function(){this.currentStream&&(this.currentStream.getVideoTracks().forEach(function(e){e.stop()}),this.videoElem.srcObject=null)},e.prototype.selectNextCamera=function(){return n(this,void 0,void 0,function(){var t,r,n,i=this;return s(this,function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),this.hasGetUserMedia?this.devices.length<2?(console.log("There's only one camera, can't switch"),o("There's only one camera, can't switch",c),[2,null]):(o("current Device"+this.currentDevice,c),this.currentDevice=(this.currentDevice+1)%this.devices.length,o("current Device after"+this.currentDevice+" id: "+this.devices[this.currentDevice].deviceId,c),t={video:{deviceId:{exact:this.devices[this.currentDevice].deviceId}},audio:!1},this.stopCurrentStream(),r=this,[4,navigator.mediaDevices.getUserMedia(t)]):(console.log("getUserMedia() is not supported by your browser"),[2,null]);case 1:return r.currentStream=e.sent(),this.videoElem.srcObject=this.currentStream,this.videoElem.onloadedmetadata=function(){console.log("Video resolution: ",i.videoElem.videoWidth,i.videoElem.videoHeight),i.cameraResolution={width:i.videoElem.videoWidth,height:i.videoElem.videoHeight}},[2,!0];case 2:if(n=e.sent(),console.error("getUserMedia error: "+n.name,n),o("ERR "+n,c),"ConstraintNotSatisfiedError"===n.name)throw"The constraints are not supported "+a;if("PermissionDeniedError"===n.name)throw"User denied permission to access the camera. Too bad.";return[3,3];case 3:return[2]}})})},e}(),u=function(o,s,c,a){return new(c||(c=Promise))(function(e,t){function r(e){try{i(a.next(e))}catch(e){t(e)}}function n(e){try{i(a.throw(e))}catch(e){t(e)}}function i(t){t.done?e(t.value):new c(function(e){e(t.value)}).then(r,n)}i((a=a.apply(o,s||[])).next())})},l=function(r,n){var i,o,s,e,c={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return e={next:t(0),throw:t(1),return:t(2)},"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(i)throw new TypeError("Generator is already executing.");for(;c;)try{if(i=1,o&&(s=2&t[0]?o.return:t[0]?o.throw||((s=o.return)&&s.call(o),0):o.next)&&!(s=s.call(o,t[1])).done)return s;switch(o=0,s&&(t=[2&t[0],s.value]),t[0]){case 0:case 1:s=t;break;case 4:return c.label++,{value:t[1],done:!1};case 5:c.label++,o=t[1],t=[0];continue;case 7:t=c.ops.pop(),c.trys.pop();continue;default:if(!(s=0<(s=c.trys).length&&s[s.length-1])&&(6===t[0]||2===t[0])){c=0;continue}if(3===t[0]&&(!s||t[1]>s[0]&&t[1]<s[3])){c.label=t[1];break}if(6===t[0]&&c.label<s[1]){c.label=s[1],s=t;break}if(s&&c.label<s[2]){c.label=s[2],c.ops.push(t);break}s[2]&&c.ops.pop(),c.trys.pop();continue}t=n.call(r,c)}catch(e){t=[6,e],o=0}finally{i=s=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}},d=document.querySelector(".video"),h=document.getElementById("log"),f=document.querySelector(".switch-camera");!function(){u(this,void 0,void 0,function(){var t,r,n=this;return l(this,function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,(t=new i(d)).getCameraPermission()];case 1:return e.sent(),f.addEventListener("click",function(e){return u(n,void 0,void 0,function(){return l(this,function(e){switch(e.label){case 0:return[4,t.selectNextCamera()];case 1:return e.sent(),[2]}})})}),[3,3];case 2:return r=e.sent(),console.log(r),o("exc"+r,h),[3,3];case 3:return[2]}})})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,